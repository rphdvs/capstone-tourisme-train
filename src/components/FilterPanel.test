// FilterPanel.js
import { useState } from "react";

// ... (icônes et composant Toggle ne changent pas)
const CloseIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path></svg>
);
const Toggle = ({ label, enabled, setEnabled }) => (
    <div className="flex items-center justify-between">
        <span className="text-gray-700">{label}</span>
        <button 
            onClick={() => setEnabled(!enabled)}
            className={`relative inline-flex items-center h-6 rounded-full w-11 transition-colors ${enabled ? 'bg-blue-600' : 'bg-gray-200'}`}
        >
            <span className={`inline-block w-4 h-4 transform bg-white rounded-full transition-transform ${enabled ? 'translate-x-6' : 'translate-x-1'}`} />
        </button>
    </div>
);


export function FilterPanel({ onClose }) {
  const [duration, setDuration] = useState(120);
  const [withBike, setWithBike] = useState(false);
  const [onFoot, setOnFoot] = useState(true);
  const [withTransport, setWithTransport] = useState(true);

  // 1. LA NOUVELLE FONCTION DE FORMATAGE
  const formatDuration = (totalMinutes) => {
    if (totalMinutes < 60) {
      return `${totalMinutes} min`;
    }
    const hours = Math.floor(totalMinutes / 60);
    const minutes = totalMinutes % 60;
    
    // Si les minutes restantes sont 0, on affiche seulement les heures (ex: "2h")
    if (minutes === 0) {
      return `${hours}h`;
    }
    // Sinon, on affiche les deux (ex: "1h 30min")
    return `${hours}h ${minutes}min`;
  };

  return (
    <div className="w-[300px] h-auto bg-white rounded-xl shadow-lg font-sans flex flex-col p-4">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-bold text-gray-800">Filtres</h3>
      </div>

      <div className="space-y-6">
        <div className="space-y-3">
            <Toggle label="Vélo autorisé" enabled={withBike} setEnabled={setWithBike} />
            <Toggle label="Accès à pied" enabled={onFoot} setEnabled={setOnFoot} />
            <Toggle label="Transports en commun" enabled={withTransport} setEnabled={setWithTransport} />
        </div>
        
        <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
                Durée max. du trajet : 
                {/* 2. ON UTILISE LA NOUVELLE FONCTION ICI */}
                <span className="font-bold text-blue-600"> {formatDuration(duration)}</span>
            </label>
            <input
                type="range"
                min="30"
                max="300"
                step="15"
                value={duration}
                onChange={(e) => setDuration(e.target.value)}
                className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
            />
        </div>
      </div>
    </div>
  );
}